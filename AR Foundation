
※ 1강. AR Foundation 개발 환경 준비

▶ AR Session : 현재 AR app의 LifeCycle을 관리하고, 현재 LifeCycle이 어디에 해당되는지 다른 AR Object들에게 알려준다. 
		따라서 AR Session이 없으면 AR이 동작하지 않는다.
		모든 AR Foundation Scene에는 AR Session GameObject가 하나 존재해야 한다.
		>> AR LifeCycle :  AR 기능이 동작하고 종료할떄까지의 흐름
		
▶ AR Session Origin :  AR 세상의 중심이 된다,
			Scene상에 있는 모든 GameObject는 일단 원점을 기준으로 움직이지는 않는다.
			즉, 카메라를 움직일 때 GameObject가 움직이는 것이 아니라 카메라가 움직이는 것이다.(당연한 이야기)

			사용자가  AR app을 사용했을 때, 현재 위치에 따라서 Object가 다르게 보인다.(위치에 따라서 존재하는 Objecr가 다르다.)
			하지만 게임 세상에 있는 Object 스스로는 자기가 가만히 있다고 생각한다.(세상에 존재하는 카메라가 움직이게 되는 것이다.) 

			그리고 Scene에 존재하는 모든 GameObject들은 AR session Origin Component를 가지고 있는 Object를 중심으로 편셩된다.
			즉, AR Session Origin에 변경사항이 생긴다면 상대적으로 GameObject들은 자기가 변경되었다고 느끼지는 않지만,
			(AR Session Origin을 기준으로 했을 때는 변화가 없기 떄문에)
			AR Session Origin의 영향을 받아서 커지거나 줄어들기 떄문에 크기나 위치가 달라보이게 되는 것이다. 
  ▼ AR Camera : AR Session Origin의 자식으로 AR Camera가 있다.
		이 AR Camera가 움직있는 Camera이다.(게임 세상 속에서)
		이 카메라는 사용자의 핸드폰에 있는 Camera와 대응된다고 보면 된다.

		핸드폰의 위치, 각도 등의 정보를 받아와서 현재 AR Session을 중심으로 AR Camera를 상대 위치로 밀어내버린다.(자동으로)
		즉, 모든 GameObject들은 그 자리에 그대로 있지만, 이 AR Camera가 움직임으로써 Object들이 다른 모습으로 보이게 되는 것이다.
		
** Object 

ex) Cube GameObject → default 값 : Scale(1,1,1)
    >> 설명 : Unity에서 3D Cube GameObject의 한 변의 길이가 1유닛이다. 
              그리고 이 1유닛은(게임의) 현실의 1m에 대응된다.(기본적으로)
	      그래서 AR 세상의 1m에 대응되면 너무 크다. 따라서 적당히 좀 줄여주는 것이 좋다.
	      >> ex) Scale(1,1,1) → Scale(0.1, 0.1, 0.1)로 변경한다면 현실의 10cm와 대응되는 것이다.

---------------------------------------------------------------------------------------------------------------------------------

※ 2강. AR Scene의 필수 Component를 사용 / AR Raycast를 통해 Object 생성

◎ 활용예제 : 지면(표면)을 감지하고 감지된 지면(표면)에 원하는 Object를 터치로 배치

◎ 방법
  ● 터치한 지점을 기준으로(즉, 화면공간에서 터치한 지점을 기준으로)
  ● 그 기준을 AR 공간상으로 옮겨서
  ● AR 공간상에서 Ray라는 광선을 쏘아서(Raycast)
  ● 그 광선에 닿는 지면(표면)의 위치를 감지한다.(감지한 곳에 원하는 Object를 생성..)
  
◎ 실습

** AR Session에 AR Input Manager가 있어서 사용자의 입력을 감지할 수 있다.(즉, 터치 감지 가능)
** 그래서 (감지된) 터치를 Script파일에서 사용할 수 있다.
** 다만, Raycast를 사용하기 위해서는(감지된 터치를 통해서 눈에 보이지 않는 광선을 쏘는 부분)
** Scene에새로운 Component가 최소 하나가 필요하고, 그것을 AR Session Origin에 추가해야 한다.
   (AR Session Origin Component가 추가되어 있는 Object에 AR Raycast Manager Component를 추가한다.)
   ▶ AR Session Origin에 추가해야 하는 이유 : AR Session Origin이 AR 공간의 기준이 된다.


[1] Cube Object를 Prefab으로 만들기(만들고 Hierarchy창에 있는 Cube Object는 삭제)
[2] Script 파일 생성

[ OOOOOO.cs 파일 ]
...
...
using UnityEngine.XR.ARFoundation; // AR Foundation을 사용하기 위해 추가
using UnityEngine.XR.ARSubsystems; // AR Raycast를 사용하기 위해 추가

▶ ARFoundation : AR 관련 중요한 Component들이 선언되어 있다.
▶ ARSubsystems : AR 관련 Subsystem, 부가적인 편의 기능들이 선언되어 있다.
 
...
...
 
  public ARRaycastManager arRAycaster; // ARRAycastManager가 Raycast를 실행한다. (Raycast를 사용하기 위해)
 
  public GameObject spawnPrefab; // 터지할 지점에 생성할 GameObject Prefab(생성할 Target)

  private List<ARRaycastHit> hits = new List<ARRaycastHit>(); // Raycast에 hits을 사용하기 위해 새롭게 선언


  // void Start() 함수는 삭제(이번 예제에서는 필요 없음) //
  
  
  void Update()
  {
    (1) 일단 매 프레임마다 입력을 감지해야 한다.(터치 감지)
    
    // 입력을(터치를) 한번도 하지 않았다면 Update Method 바로 종료.
    if(Input.touchCount == 0) { return; }
    
    ▶ Input.touchCount : AR 관련 Library가 아니고, Unity에 원래 속해있는.., 현재 프레임에서 화면에 몇 번 입력이(터치가) 되었는지 알 수 있다.
    
    
    
    (2) 만약, 여러 번을 입력했다면(터치했다면), 그 중에서 첫 번째 입력 지점(터치 지점)을 사용할 것이다.
    
    // 여러 개의 입력지점(터치지점) 중에서 GetTouch에 지정한 Index에 해당하는 입력 값(터치 값)에 대한 정보만 알려준다.(가장 처음의 입력(터치)정보만)   
    // Touch 타입으로 정보를 알려주므로 Touch 자료형(?)인 touch에 정보를 저장한다.
    Touch touch = Input.GetTouch(0);
    
    ▷ Q. GetTouch말고 Input.GetMouseButton은 사용할 수 없을까? 
       A. 사용할 수 없다. Mouse와 관련된 Library는 사용하면 안 된다.
       
       이유) Input.GetTouch Method를 사용하게 되면 Vector나 boolean 같은 그 Type 그대로 정보를 받아오는 것이 아니라
             여러 개의 입력 정보(터치 정보)가 하나의 Contain으로 포함되어 Touch Type으로 정보를 불러온다.(가져온다/받는다)
             즉, GetMouseButton과 차이점은 Touch Type은 '위치, 클릭 정보'에 더하여 '지금 입력(터치)를 하는 시점인지, 입력을(터치를) 떼는 시점인지' 등의 부가정보도 함께 있다.
             
             그러나 GetMouseButton은 그렇지 않다.
             예를 들어, Input.GetMouseButtonDown(0)을 사용하게 되면 bool값만(true 또는 false) 받을 수 있다.
             단어 그대로 지금(현재) 마우스버튼을 클릭했는지 안했는지의 정보만 알 수 있고, 여러 부가 정보도 알 수 없다
             그래서 GetMouseButton Method를 사용하면 다른 별게의 Method를 또 사용해야 하므로 코드가 길어질(복잡) 수 있다.
             
             따라서 현재 예제에서는 모바일 기기 대상이므로 Touch Type 하나로 사용하는 것이 효율적이다.
 
    
    (3) if(현재 입력(터치)의 상태 != 터치 상태가 Begin인 경우)
    
    // 현재 입력(터치)의 상태가 Began이 아니면 더 이상 진행하지 않고 즉시 종료한다.
    if(touch.phase != TouchPhase.Began){ return; }


    (4) 첫번쨰 입력(터치)라면 Raycast를 실행해야 한다.
        그래서 실제로 광선에 닿은 무엇인가가 있다면 true가 반환된다.
    
    // arRaycaster : public으로 선언해준 ARRaycastManager
    if(arRaycaster.Raycast(touch.position, hits, TrackableType.Planes)) // 광선에 닿은 무엇인가가 있다면
    {
    	
	▶ touch.position : Raycast가 실행되는 화면상의 지점
    	▶ hits : Raycast가 끝났을 때, 그 Raycast의 결과물을 저장하는 Container(Container의 Type은 List여야 한다.)
    	▶ TrackableType.Planes : Raycast를 실행할 때, 어떤 친구에게만 한정해서 실행할 것인지 Trackable Type으로 선언할 수 있음.
        			  >> Plane(평면) / Image / ......
    	▷ Q. hist를 List로 선언하는 이유는?
       	   A. Raycast를 실행했을때, 두 개 이상의 충돌정보가 생성될 수 있기 때문이다.
              (광선이 두 개 이상을 관통할 수 있으므로 여러 정보를 저장할 수 있는 List로 Raycast 결과물을 저장한다.)
	      
       
       // Raycast의 결과물은 Pose Type으로 들어온다.	      
       Pose hitPose = hits[0].pose; // 여러 개의 정보 중에서 첫 번째 정보(입력정보(터치))만 사용할 것이므로 Index 값은 0
       
       ▶ Pose Type : AR Raycast를 사용할 때, 단순히 결과값만(충돌지점) 가져오는 것은 별로 쓸모가 없다.
       		      그래서 충돌지점을 포함한 다양한 부가정보도 함께 저장하는 것이 Pose Type이다. 
		      (ex. 실제 핸드폰 카메라의 위치, AR 공간상에서 방금 광선에 맞았던 물체 사이의 거리 등)
       
       
       // Instantiate Method를 통해서
       Instantiate(spawnPrefab, hitPose.position, hitPose.rotation);
       
       ▶ spawnPrefab : 생성할 복제본
       ▶ hitPose.position : 생성할 위치(충돌위치)
       ▶ hitPose.rotation : 충돌 각도(회전방향)    
    }
  }


[3] Script를 추가할 Object에 작성한 Script를 추가하고,
    arRaycaster에는 AR Session Origin GameObject를 추가하고,
    spawn prefab(복사할 대상)에는 Cube Object로 생성했었던 prefab를 넣어준다. 


[4] 추후 빌드하여 확인해볼 때,
    평면인식이 잘 되지 않는다면, 높은 위치에 있는 평면과 낮은 위치에 있는 평면의 차이가 드러나지 않는다.
    평면인식이 잘 된다면, 높은 위치에 있는 평면과 낮은 위치에 있는 평면의 차이를 확실히 알 수 있다.
 
 
[5] (평면인식이 잘 되고 있는 상황이라면) 한 가지 아쉬운 점은 현재 어떤 Plane이 감지(인식)되고 있는지 시각적인 피드백으로 확인해 볼 수 없다는 것이다.
    즉, AR Cloud가 포함되어 있지 않다.(Point Cloud)
    
    예를 들어, 
    감지된 Plane 위에 자잘한 Particle 효과가 생성되거나(화면을 크게 해치지 않는 수준에서 현재 화면에서 감지되고 있는 Plane이 무엇인지 알 수 있도록)
    또는 
    감지된 Plane위에 약간 연한 색의 컬러를 입히는 Plane Play GameObject가 Mesh로 표현되어 알 수 있거나...
    
    무튼 이러한 방법을 사용하기 위해서는
    즉, AR Cloud가 있어야지 현재 어떤 Plane이 감지되고 있는지 알 수 있다.
    
    그래서 AR Cloud(Point Cloud)를 표현해주는 그러한 Effect를 만들어줘야 하고, 
    감지된 Plane을 따라서 Mesh를 생성해주는 그러한 Effect도 추가해주어야 한다.
    
    그러기 위해서는 AR Session Orgin Component를 가지고 있는 Object에 AR Point Cloud Manager Component를 추가한다.
    그리고 추가한 AR Point Cloud Manager의 Point Cloud Prefab에 (추가하고 싶은)prefab을 추가해주면
    이 prefab을 피처 포인트에 생성해줄 것이다.

    ▶ point Cloud는 피처 포인트를 표현하는 것으로 피처 포인트는 현재 화면에서 대조가 강하고 즉, 기준으로서 삼을만한 지점이 되는 포인트??
    
    더하여 AR Plane Manager도 추가해준다.
    AR Plane Manager는 감지된 Plane을 따라서 그 Plane을 표현해줄 prefab GameObject를 실시간으로 생성해줄 것 이다.


[6] AR Point Cloud Manager와 AR Plane Manager에 각긱 아무 prefab이나 할당해 줄 수도 있지만
    그러면 너무 복잡하고 비주얼적으로도 올바르게 보이지 않을 것이다.
    
    그래서 AR Foundation에서 제공하는 GameObject를 사용할 것이다.
    Hierarchy창에서 XR에 속해있는 AR Default Plane과 AR Default Point Cloud GameObject를 생성한다.
    
    AR Default Point Cloud에는 Particle System이 추가되어 있다.
    이것을 통제하는 AR Point Cloud와 AR Point Cloud Particle Visualizer도 포함되어 있다.
    
    피처포인트라는 것은 지금 당장에 화면에 잡히는 지점 중에서 특별해 보이는 부분을 따라서 생성되는 효과인데,
    그렇기 때문에 화면을 다른 곳으로 돌리는 순간 사라져야 한다.(그 특별해 보이는 부분에서만 피처포인트가 보여야 하니까)
    그래서 그런 기능을 AR Point Cloud와 AR Point Cloud Particle Visualizer들이 해주는 것이다.(우리가 직접  기능을 만들 수도 있지만)
 
    ▶ AR Default Plane의 요소 중 'AR Plane - Destroy On Remove (check) 가 있다. 
      이것은 더 이상 화면상에 존재하지 않을 때 파괴된다는 의미를 가지고 있다.
    ▶ AR Plane Mesh Visualizer : plane의 Mesh를 감지된(인식된) plane의 영역에 맞춰서 자동으로 따라서 만들어 준다.
      				  만약 이것을 사용하지 않고 Cube Object나 Plane Obejct를 사용해버리면 그냥 감지된 표면의 중앙점에 해당 GameObject가 덜렁 놓여지게 된다.

 
 
[7] 생성한 AR Default Plane과 AR Default Point Cloud GameObject를 prefab으로 만들어주고, Hierarchy창에서 삭제한다.
    이후 다시 AR Session Origin으로 가서 AR Default Plane prefab을 AR Plane Manager의 prefab에 할당해준다.
    그리고 AR Point Cloud Manager의 prefab에 AR Default Point Cloud prefab을 할당해준다.
    
   ** AR Default Point Cloud에 실제로 눈으로 보이는 부분은 Particle System이 다루고 있으므로 Particle system의 색깔을 변경해주면 색이 다르게 보일 것이다. 

 
    
----------------------------------------------------------------------------------------------------------------------------------------------------------------

※ 3강. ARSession LifeCycle / ARSessionOrigin 

 
[1] AR Session의 AR Session Component

AR OO?의 LifeCycle을 관리하고, 현재 AR 기기의 상태를 표현해준다.

예를 들어 AR Session Component로 'Place On Plane' Script가 AR 기능이 활성화인지 비활성화인지를 확인할 수 있다.
>> void Update()
   {   	
   	// 현재 상태가 ready가 아니면 그만 중지(멈춤)
	if(ARSession.state != ARSessionState.Ready) { return; }
	
	▶ ARSession.state : 현재 AR Session Object의 상태가 표시(상태는 여러가지가 있다.) 
   }


한 가지 유의할 점은 ARSession.state 값을 '정적필드'로 접근한다는 것을 알고 있어야 한다.  

예를 들어 'public ARSession arSession;'으로 선언한 다음에 이 arSession 변수에 Object를 드래그 앤 드롭하여 연결하거나
아니면 FIndObjectOfType 같은 것을 통해서 접근하여 사용할 수 없다. 

정리하자면 state라는 필드가 arSession Object에 분명하게 있지만, '접근'은 되지 않는다.

▷ Q. 왜 state값을 정적 필드로 접근하도록 만들었을까?
   A. AR Session은 무조건 Scene에서 하나만 존재해야 하기 때문이다.
      일종의 싱글톤 구현과 비슷한 느낌이다.
      즉, 'public ARSession arSession;'과 같이 별개의 referencef로 참조할 필요 없이(따로 변수를 선언할 필요 없이)
      즉시 정적필드(ARSession.state)를 통해서 AR 값들의 상태나 정보를 가져올 수 있게 만들어 놓은 것이다.


Update()함수에서 실시간으로 ARSession.state를 참조해도 되지만,
다른 방법으로 현재 AR 기기의 LifeCycle 상태가 변경이 될 때, 그때 맞춰서 실행되는 이벤트 함수가 있다.

예를 들어 ARSession을 구독하고 있다가, 상태가 변경되는 그 순간, 변경된 상태를 알아오는 것이다.
>> bool IsActive = false; // 선언 

   void Awake()
   {
	// ARSession.StateChanged 이벤트에 등록된 Method는 상태가 변할 때마다 자동적으로 실행
	ARSession.StateChanged += OnStateChanged; // OnStateChanged()함수를 구독시켜준다.
   }

   void OnStateChanged(ARSessionStateChangedEventARgs args)
   {
        ▶ OnStateChanged() method는 ARSessionStateChangedEventARgs 값을 받는 메소드.
          이러면 매 프레임을 확인할(체크할) 필요 없이 자동으로 state가 변경된 시점에 맞춰서 실행될 것 이다.

	// 현재 state가 변경될 때마다 그 변경된 state를 표시하고 싶다면
	Debug.Log(args.state); 


	// Safety Check 코드(안전장치로)
	if(args.state == ARSessionState.Unsupported) // 만약 지원이 안 되는 기기에서 이 코드를 실행하고 있다면('Unsupported'말고도 여러가지가 있다.)
	{
		Application.Quit(); // 현재 어플리케이션 종료(간단한 예시를 위해서, 이 방법말고 다른 방법으로도 코드를 짤 수 있다.)
		return; //그리고 바로 return
	}

	// 변경된 state가 ARSessionState.Ready라면
	if(args.state == ARSessionState.Ready) 
	{

		isActive = true;
	}
	else
	{

		isActive = false;

	}
    }


    void Update()
    {

	if(!IsActive){ return; } // isActive가 false라면 여기서 코드 바로 종료.	
    }

 

결론적으로 ARSession의 state와 stateChanged를 통해서 현재 AR 기기의 LifeCycle의 상태를 확인할 수 있고,
우리가 원하는 OO??상태??에 도달하기 전까지 여러 처리를 할 수 있다.
그래서 ARSession을 정적으로 사용한다는 말은 실제로 Scene의 Object에 추가되어 있는 AR Session에 접근하여 사용한다는 말이다.

그리고 덧붙이자면, AR Input Manager는 직접적으로 사용할 일이 없을 것이다.
(ARSession과 AR Input Manager는 자동 생성되는 것으로 둘다 직접적으로 변경하거나 뭐 이런 일은 거의 없을? 것이다.)
(우리가 직접 무엇을 수정할 일은 거의 없다.)

AR Input Manager는 현재 기기의 pause나 상태에 대한 '입력'을 받아와서 world tracking을 가능하게 만들어 주는 Component이다.
그래서 AR Input Manager가 없으면 world tracking이 되지 않는다.
그리고 Scene에서 단 하나만 존재해야 하고, 무조건 하나가 있어야 한다.

(그리고 AR Session의 Attempt Update필드는 체크되어 있으면, AR이 가능한 기기이지만,)
(아직 AR을 위한 미들웨어 소프트웨어가 깔리지 않았다는 .......)

 

[2] AR Session Origin(모든 AR 공간상의 GameObject 중심좌표의 기준★)

예를 들어 AR Session Origin의 Scale(크기)을 10배 증가시키면 모든 GameObject의 크기는(AR 공간상에 비치는 크기) 10배 줄어든다.
즉, 기준이 10배 증가하면 반대로 기준이 아닌 Obejct는 10배 감소한다. (ex. 나는 그대로인데 세상이 10배 늘어난 것. 그래서 나는 상대적으로 10배 줄어든 것.)
그래서 웬만하면 위치는(Position) 중점에(0,0,0) 두어도 된다.

 ▶ AR Session Origin의 Camera 필드 설명
    
    AR Session Origin은 카메라를 밀어낸다.
    AR Session Origin의 위치를 중심으로 AR 카메라가 현실OO??되는 카메라가 밀려나서 멀리 떨어진다고 생각하면 된다.
    기준 좌표계에서 카메라가 대응되는 방향으로 밀려나서 세상을 관찰하는 것이다.

 
그리고 AR Session Origin은 어떤 GameObject가 현실에 어떤 위치에 대응되도록 보이게 하기 위해서는 자기 자신을(AR Session Origi) 얼만큼 옮겨야 되는지를 알고 있다.

예를 들어 AR Session Origin이 오른쪽으로 5만큼 가게 되면( (0,0,0) -> (5,0,0) )
모든 Object들은 스스로 위치가 변하지 않은 것 처럼 보이게 된다. 
그러니까 세상이 오른쪽으로 5만큼 움직이면 나는 가만히 있는데, 나는 상대적으로 세상에 비해서 왼쪽으로 5만큼 움직인것 같은 착각?느낌?이 든다.
그렇기 떄문에 모든 GameObject들은 Unity 세상 내에서는 그 위치 그대로 있다.
다만, 모든 Object들이 현실 세상에 대응되어 보았을 때는 그만큼 밀려나서 움직이는 것이다.

그래서 '자기 자신을 얼만큼 옮겨야 되는지를 알고 있다는 말'은 
AR 앱을 실행시킨 상태에서 앉은 장소나 테이블을 바꿨을때, 사용자의 컨텐츠를 해당 위치에 그대로 옮겨올 수 있다는 얘기이다.

예를 들어 테이블 A에서 게임을 실행시키다 테이블 B로 자리를 옮겼다.
그러나 테이블 B로 자리를 옮겨도 사용자의 모든 컨텐츠는 테이블 A에 있다.
그럼 사용자는 게임 속 세상의 좌표는 영향을 받지 않으면서도 단지 그 기준점인 AR Session Origin의 위치만 변경을 해서 모든 세상의 위치가 탁자 B위치로 밀려들어오도록 하고 싶은 것이다.

 
◎ 활용예제 : 사용자가 터치한 지점을 AR 세상의 (0,0,0)지점으로 재편성(Obecjt : Capsule → Capsule Object가 터치한 그 위치에 보이도록 World를 통쨰로 옮기는 것)
>>  Hierarchy창에서 Capsule Object 하나 추가생성(Position : 0,0,2 / Rotation : default 값 유지/ Scale :  0.1, 0.1, 0.1)
>>  Capsule의 위치는 그대로 (0,0,2)를 유지하면서 사용자가 핸드폰 화면을 터치한 지점을 기준으로 Capsule이 생성되도록 하고 싶다.
    정리하자면 게임 속(Unity) 세상에서는 계속 (0,0,2)위치인데, 게임 세상 속 자체를 다 묶어서 Capsule이 우리가 터치한 지점의 위치로 밀어내는 것이다. 
    즉, 게임 내부는 변하지 않고 게임 세상 자체가 통쨰로 Capsuel이 그 위치에 보이도록 밀려나는 것이다.

[ Move AR World Pivot.cs 파일] 

// 어떤 Object가 터치한 장소에 보이게 하려면, '세상 그 자체를' 얼만큼 평행이동해야 할지 알고 그렇게 이동함. //

...
...
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

public class MoveARWorldPivot : MonoBehaviour
{

	public Transform target; // 이 target을 터치한 지점으로 옮길 것이다.

	public ARRaycastManager rayCastmanager; // 터치한 지점을 알려면 Raycast가 필요하다.

	public ARSessionOrigin arSessionOrigin;	

	private List<ARRaycastHit> hits = new List<ARRaycastHit>(); // Raycast 결과를 담을 리스트

	void Update()
	{	

		// 터치가 하나도 없으면
		if(Input.touchCount == 0){ return; } // 즉시 종료

		Touch touch = Input.GetTouch(0); // 0번째 값(제일 첫번 쨰 값)

		// 터치가 감지되었다면(광선이 무엇인가를 향해 닿았다면)
		   ▶ (터치한 지점의 위치를 기준으로 , Raycast 결과를 받을,  Raycast 할 대상 명시) 	
		if(rayCastmanager.Raycast(touch.position, hits, TrackableType.Planes))
		{

			Pose hitPose = hits[0].pose; // 가장 첫번 째 터치 값의 정보

			// (옮기고 싶은 물건(world 자체를 통째로 옮기는 것), 위치 , 회전)

			arSessionOrigin.MakeContentAppearAt(target, hitPose.position, hitPose.rotation);

			▶ MakeContentAppearAt Method 
			  : 목표 taget Contents를 원하는 지점에 보이게 하기 위해
			    세상을 얼만큼 평행이동 시켜야 하는지를 알고, 실제로 평행이동 시키는 Method.
			    ( World 좌표 내의 Object들 스스로는 변함이 없다.)
			    ▶ target : 옮기고 싶은 target(world 자체를 통째로 옮기는 것)
			    ▶ hitPose.position : 위치
			    ▶ hitPose.rotation : 회전

		}
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------

※ 4강. ARPlane의 여러 Type/ ARPlanManager의 이벤트

[1] rayCastmanager.Raycast(touch.position, hits, TrackableType.Planes)

 ▶ TrackableType.(Type) : All, Face, Image 등 다양한 Type이 있는데, 여기서 Plane에 관련된 것들을 주로 많이 사용한다.
    ● PlaneEstimated : 부정확한 경계(불명확한 경계선)를 가지고 있는 평면을 감지
    ● PlaneWithinBounds : 실제로 감지된 plane 다각형을 감쌀 수 있는 가장 작은 크기의 직사각형 내의 영역을 감지
    ● PlaneWithinInfinity : 감지한 평면을 통해서 그것을 확장해서(무한히 확장한다는 가정하에) Raycast를 실행
    ● PlaneWithinPolygon : 제일 정확한 영역을 측정
    ● Plans
    
    >> 영역의 포함관계( ← 작아짐 ~~~~~ 커짐 → )
       PlaneWithinPolygon < PlaneWithinBounds < PlaneEstimated < PlaneWithinInfinity

▶ hits : 여기에 저장되는 정보들은 거리순으로 반환이 된다.(제일 작은 거리부터 List에 저장 된다.)
   
  'hits[0].pose;' 에서 pose말고 여러 Type들이 있다.
    
    ● hits.distance : 카메라의 위치와 광선을 맞은 해당 충돌포인트의 위치 사이의 거리
    ● hits.hitType : 이 Ray를 맞은 상대방 평면의 Type이 무엇인지 알 수 있음
    ● hits.sessionRelativeDistance : AR session 공간 내에서의 거리

    >> distance와 sessionRelativeDistance는 다를 수 있다. (그냥 distance는 유니티 Scene 세상에서의 거리를 뜻한다.(즉, 게임 공간상의 거리))
      왜냐하면 AR Session Origin Obeject를 조정함으로써 OOOOO 다르게 조정할 수 있다, 
  
      자세히 설명하자면, AR Session Origin는 World의 중심이 되고, 배열의 중심이 된다.
      그래서 AR Session Origin의 Object의 크기가 달라지면 Unity 세상에서의 크기와 거리는 변화가 없지만, AR Session 내에서의 측정한 거리는 달라질 수 있다.

   ● hits.sessionRelativePose : 게임 상에서의 pose가 아니라 ARSession Orgin을 기준으로 측정한 pose 정보를 준다.
   ● hits.trackableId : Ray가 충돌한 대상의 trackable Type인데 그 trackable 타입에 할당된 ID를 갖다준다.
     >> .trackableId는 특정 tracking이 가능한 Obejct에 대해서만 어떤 코드를 동작시키고 싶을 때 사용할 수 있다.
         또는 이전에 tracking 했던 것과 지금 tracking 했던 것이 똑같은지도 비교할 수 있다.

[2] Pose hitPose = hits[0].pose; 

▶ Pose Type : 위치, 회전을 3차원 공간에서 나타낸다.
   ● hitPose.forward : 해당 충돌한 표면의 앞쪽 방향
   ● hitPose.right : 해당 충돌한 표면의 오른쪽 방향
   ● hitPose.up : 해당 충돌한 표면의 위쪽 방향
   ● hitPose.rotation : ....
   ● hitPose.position : ....

정리하자면 Pose Type은 '충돌한 표면에, 어떤 지점에, 앞쪽, 위쪽, 오른쪽, 회전, 위치' 를 나타내는 Type이다.

 
[3] >>>>> 이 부분 나중에 다시 듣기 <<<<<<<

Raycast를 사용 할 때 주의할 점이 있다.

예를 들어 'arRaycaster.Raycast(touch.position, hits, TrackableType.Planes)'에서 arRaycaster는 TrackableType에 대해서만 감지를 할 수 있다.
Object에 Collider Component가 추가되어 있다고 해서 Raycast를 사용할 수는 없다.

일반적인 GameObejct에 붙어있는 Collider를 광선으로 감지할려면 이미 존재하는 Physics.Raycast를 사용하면 된다.

다른 말로 하면 (일반적인 - Collider Component가 추가된) GameObejct에서 arRaycaster가 감지되면, 
GameObject에 가려서 AR 세상에 있는 실제 평면을 감지할 수 없다.

그래서 만약에 AR 앱을 개발했을때, AR를 통해서 생성한 GameObject에게 다시 어떠한 터치를 한다던가 
광선을 쏜다던가 하면 arRaycaster가 아니라 Physics.Raycast를 사용해야 한다.(Unity의 전통적인 방식의 Raycast를 해야한다.)


[4] AR Plane Manager

AR Plane Manager는 여기에 할당된 prefab을 감지된 평면 위에다가 생성을 하는데, 
중요한 점은 아무거나 할당해도 되지만 되도록 AR Plane Component를 가진 prefab을 할당하는 것이 좋다.
그 이유는  AR Plane Component를 가져야 실제로 해당 평면의 크기에 맞춰서(해당 평면에 감지된 경계선(바운더리)에 맞춰서) 자동으로 Mesh가 늘어난다.

이것 말고도 생성된 AR Plane이 변화가 생겼을 때 또는 새로운 Plane이 감지가 되었을 때 그에 맞춰서 실행되는 이벤트가 있다.
그래서 새로운 평면이 감지되거나 기존 평면의 새로운 변화가 감지되었을때 맞춰서 실행하고 싶은 Method가 있다면 그 Method를 추가할 수 있다.



[5]

◎ 활용예제 : 새로운 평면이 감지될 때 마다 그 평면에 새로운 GameObject를 평면 위에 랜덤한 지점에 생성.

[ OOOOOOO. cs 파일]

...
...
using UnityEngine.XR.ARFoundation;

public class AddNew : MonoBehavior
{
   public GameObject spawnTarget; // 생성할 GameObject의 Prefab
   
   public ARPlaneManager arPlaneManager; // ARplaneManager를 변수로 받아와야 접근해서 사용할 수 있다.
   
   private Dictionary<TrackableId, GameObject> spawnedObjects;
   ▶ Key 값 :  TrackableId (Plane을 기억하기 위해 사용해야 한다.(이전에 생성된))
   ▶ Value 값 : GameObject
      >> 만약에 여러 개의 GameObject를 새로 생성된 AR Plane 위에다가 생성했다면, GameObject를 위한 List나 배열 형태가 Value값으로 들어가겠지만,
         그게 아니고, AR Plane 하나당 GameObject 하나만 생성하므로 List나 배열이 아니고 , GameObject 자체를 value값으로 쓰면 된다.

   void Start()
   {
  	// ARplaneManager 이벤트에 사용자가 실행하고 싶은 Method를 등록하면 된다.
	arPlaneManager.planesChanged += SpawnObjects; // 이벤트 등록
   }


   // 등록하고자 하는 Method(public이든 private이든 상관없다.)
   private void SpawnObjects(ARPlanesChangedEventArgs args)
   {
	▶ ARPlaneManager는 주로 입력으로 ARPlanesChangedEventArgs를 받는다.
           그래서 ARPlanes이 바뀌었을 때 발생한 파라미터 값들을 챙길 수 있다.
	   ARPlaneManager가 args(데이터 Container)에 '새로 추가된 평면의 명단, 이미 존재햇지만 평면이 갱신된 명단, 존재했다가 삭제되어 버린 명단'을 넣어줄 것이다.

		
	// "새로 추가된 plane이 대응되는" (현재 하고자 하는 건 새로 추가된 평면에 대해서만 생성하는 것이므로)
	List<Applane> addedPlanes = args.added;  
	▶ added : 새로 추가된 평면의 Type
	▶ removed : 있다가 삭제된 평면의 Type
	▶ updated : 있었는데 형태나 모양같은 것이 변경된 평면 Type


	if(addedPlanes.Count > 0)
	{	
	    // 순회하면서 planes를 하나씩 생성하면 된다.
	    // 랜덤한 지점에 찍기 위해서는 평면의 중앙지점과 경계선도 알아야 한다.
	    foreach(ARPlane plane in addedPlanes)
	    {
	       // 위치 
	       Vector3 spawnPosition = plane.center + plane.boundary[0].x 
	                               + plane.transform.right + plane.boundary[0].y + plane.transform.forward;
				       (y는 3차원방향으로 봤을 때 plane의 앞쪽방향)
				       
               GameObject instance = Instantiate(spawnTarget, spawnPosition, plane.transform.rotation);
	       ▶ Instantiate(Target, 위치, 회전)
	          >> 여기서 생각해야할 부분은 
		     생성된 AR Plane마다 Object를 생성한 다음에 
		     이미 존재하고 있던 AR Plane이 사라지는 순간에 그것에 맞춰 생성했던 Object를 파괴해야 하는 경우도 있다.

		     이런 경우에 가장 무식하지만 효과적인 방법은 
		     ((1)) 생성한 GameObject를 해당 plane의 자식 GameObject로 넣게 되면 
		           해당 plane의 GameObject가 삭제될 때, 자식 GameObject로 넣어놨던 것도 같이 삭제된다.
		     아니면 또 다른 방법으로는(좀 더 효율적인 방식? 우아한 방식?) 
		     ((2)) 생성된 GameObject에 연계되어 있는 AR Plane들을 기억 했다가
		           해당 AR Plane이 삭제될 때, 거기에 맞춰 생성한 GameObject를 파괴하는 방법도 있다. 	       	     
	    }
	}

	// "이미 추가되어 잇던 plaen이 지워질때는" 삭제될 plane 정보 저장
	List<Applane> removedPlanes = args.removed;

	// 삭제될 plane count가 0보다 크다면
	if(removedPlanes.Count > 0)
	{	
	  // 순회하면서
	  foreach(ARPlane plane in removedPlanes)
	  {	
	     // 각각의 removedPlanes에 대응되는 GameObject들을 찾아서 
	     GameObject destoryTarget = spawnedObjects[plane.trackableId];
	     Destroy(destoryTarget);

	   }

	}
	
	// " 기존 plaen이 변경되는 시점에 다른 것을 추가하고 싶다면 "
	List<Applane> updatedPlanes = args.updated;

        if(updatedPlanes.Count > 0)
        {
	  foreach(ARPlane plane in removedPlanes)
	  {
		// 상태가 갱신된 평면에 대해서 실행할 어떤 처리

	   }
	}		
   }
}

----------------------------------------------------------------------------------------------------------------------------------------

※ 5강. Plane 외곽선 Type과 엠비언트 라이팅 >>> 강의 보면서 공부하기(따라하기)
※ 6강. 이미지 기반 트래킹

[1] AR Session Origin 
    ▼ AR Carmera
    
 ▶ AR Camera Background Component 
    : 사용자의 카메라에서 Texture를 가져와서 사용자의 Scene 배경을 그려준다.
      그래서 만약 AR Camera Background Component가 없다면 다른 기능(ex. 표면 인식 등)은 잘 동작하지만
      현실 화상이 사용자의 게임 화면 뒤에 비치지 않을 뿐이다.
      그래서 기본적으로 그냥 사용하면 된다.
      
      
[2] 2D 이미지 기반 트래킹 
   
'AR 상에서 사용자가 미리 지정한 이미지가 감지되었을 때 또는 감지된 이미지의 변화가 생겼을 때의 위치,이미 감지된 이미지가 삭제됬을 때'의 경우를
 이벤트를 사용해서 알 수 있고, 감지된 이미지 위에 새로운 GameObject를 생성할 수 있는 등의 처리를 뜻한다.
     
<1>  아무것도 없는 상태에서 이미지 트래킹을 할 수 없다.
     우리가 트래킹할 이미지가 무엇인지에 대한 Library가 미리 만들어져 있어야 한다.
     그래야 그 만들어진 Library와 대조하여 해당 이미지 위에 무엇인가를 만들 수 있다.
     그래서 가장 먼저 해야할 일은 '이미지 Library'를 만들어야 한다.
     
     (1) 사용할 이미지를 Project에 Import 한다.
     (2) 그리고 그 이미지로 구성된 Library를 만들어야 한다.
         >> Tip : 어떤 이미지든 상관없지만, 가능하면 잘 구별 할 수 있는(특징이 있는) 이미지이면 좋다.
     (3) Project창 → 마우스 오른쪽 버튼 → Create → XR reference 
     (4) 생성된 XR reference의 Add Image에 사용할 이미지를 등록한다.
     (5) 이미지 Library 생성완료
     
      ▶ XR reference
      	 ● Name : 코드상에서 이미지들을 어떻게 인식할지 필요한 구분자
         ● Specify Size : 사용할 이미지가 현실에 어떤 크기에 대응되는지를 직접 명시할 수 있다.(활성화/비활성화는 자유, 필수는 아님)
	   >> 활성화하게 되면 현실의 Meter 단위로 크기를 지정할 수 있다. 
	      즉, 그 크기에 맞는 이미지를 좀 더 잘 트래킹 할 수 있다.
	      예를 들어 설정하게 된다면 이미지를 트래킹 할 때, 같은 형상을 가지고 있다고 해도 Specify Size에 설정한 크기와 비슷한 이미지를 트래킹하게 된다.
	 ● Keep Texture at Runtime : 이 Texture를 Runtime(앱이 실행되고 있는 도중에) 메모리에 진채로? 메모리에 접근해서 사용할 수 있다.
	   >> 활성화하지 않아도 이미지는 감지된다. 
	      그러나 활성화한다면 '이미지 감지'에 더하여 우리가 감지용으로 사용할 이미지를 코드로 데려와서 무엇인가를 더 수용할 수 있다.
	
	
<2>  AR Session	Origin Object로 가서 AR 이미지 트래킹을 위한 Component를 추가해주어야 한다. (AR Tracked Image Manager Component 추가) 
 
     ● Referene Library : reference로 사용할 Library(먼저 만들어놓았던 이미지 Library)를 추가
     ● Max Number Of Moving Images : 이미지가 해당 위치에 있는 것이 아니라 계속 이미지가 이동하게 될 경우에 
                                     이 값을 늘려서 계속 위치가 변하는 이미지도 트래킹할 수 있도록 이미지를 만들어 주어야 한다.
				     다만, 이 같은 경우는 Max Number Of Moving Image를 늘렸을 때, 모든 기기에서 지원하는 것은 아니다.
	>> 값을 default 값(0)으로 유지한다고 해서 트래킹이 되지 않는 것은 아니지만, 움직이는 이미지에 대해서는 트래킹이 되지 않을 수 있다.
     ● Tracked Image Prefab : 트래킹된 이미지 위에 생성할 Prefab
       >> 감지된 이미지 위에 생성할 prefab을 만들어주고 추가해준다.
       
     
     트래킹 이미지 위에다가 이미지 prefab을 생성할 뿐만 아니라 이벤트를 가지고 있어서 
     '새로운 이미지가 감지되거나, 기존 이미지가 삭제되거나, 이미 감지된 이미지에 변동사항이 생겼을 때(화면상의 현실에서의 이미지)'등 
     이럴 때 실행되는 이벤트가 있어서 이러한 상황에 맞춰서 무엇인가를 실행할 수 있다.
     
     
        
◎ 활용 예제 : 감지된 이미지에 종류에 따라서 사용자가 설정했던 이미지 prefab에 색깔이 다르게 나오도록 해보자.

[ OOOOOOO.cs 파일 ]
...
...
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

public class (Script 파일 이름) : MonoBehavior
{
    // 이벤트를 가지고 있는 AR Image Manager를 가져온다.
    public ARTrackedImageManager trackedImageManager;
    ▶ ARTrackedImageManager : '이러한 이미지가 감지되었는데, 어떤 행동을 할까?'라고 물어본다.
       >> 즉, 이미지를 감지하고 , 해당 위치를 가져오고, 그 이미지의 정보를 가져오는 모든 일을 한다.
    
    void Start()
    {
        // ARTrackedImageManager의 이벤트 중 trackekdImagesChanged가 있다.
	// 이미지들에 대해 변경사항이 생겼을 때 실행할 함수 등록.
    	trackedImageManager.trackekdImagesChanged +=
	
	▶ trackekdImagesChanged : 트래킹 중 이미지들에 대해 변경사항이 생겼을 때 여기에 맞춰서 실행되는 이벤트.
    }
    
    // ARTrackedImageManager가 모든 일을 하므로 사용자는 '무엇을 할까?' 행동에 해당하는 것만 함수로 만들어서 이벤트에 등록하면 된다.
    void OnTrackedImageChanged(ARTrackedImageChangedEvent Args args)
    {
   	 List<ARTrackedImage> addedImages = args.added;
	 List<ARTrackedImage> removedImages = args.removed;
	 //List<ARTrackedImage> UpdatedImages = args.updated;
	
	// addImages에서(새로 추가된 이미지들을) 순회를 하면서
	foreach(ARTrackedImaged image in addedImages)
	{
		
		// referenceImage는 Library에 등록했던 이미지
		if(image.referenceImage.name == "logs") // name을 사용한다.
		{
			image.gameObject.GetComponent<Renderel>().material.color = Color.red;
		}
		
	}
	
	** 정리 **
	ARTrackedImageChangedEvent Args에 들어오는 ARTrackedImage들은 
	현실에 있는 이미지를 통해서  ARTrackedImage Manager가 
	사용자가 할당한 이미지 Prefab을 해당 위치에 대응되는 Scene상의 위치로 이미지 prefab을 생성하고,
	그 이미지 prefab에  AR Tracked Image를 추가하고, 
	AR Tracked Image의 생성자에 AR Tracked Image를 생성할 때,
	이 이미지 prefab이 현실에 어떤 이미지 reference에 대응되는지 정보를 넣어놓는다.

	
	
	** 참고 **
	AR Tracked Manager가 감지된 현실에서 감지된 이미지 위에 거기에 대응되는 위치에 
        우리가 등록한 prefab을 생성하고, ARTrackedImage라는 Component를 붙인다.
    }
    
} 	
	      
	      


